{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sudheer.kokolu\\\\OneDrive - Sonata Software Limited\\\\FJA_Pricing_Tasks\\\\OAuthFrontend\\\\crudapplication\\\\src\\\\pages\\\\CrudDashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useMemo, useCallback } from 'react';\n// import { Button, Container } from '@mui/material';\n// import DataTable from '../components/DataTable';\n// import CrudDialog from '../components/CrudDialog';\n// import ConfirmDialog from '../components/ConfirmDialog';\n// import userData from '../data/userData.json'; // Import JSON data\n// import { useNavigate } from 'react-router-dom'; // For navigation\n\n// export default function CrudDashboard() {\n//   const navigate = useNavigate();\n\n//   // State to manage data\n//   const [data, setData] = useState([]);\n//   const [isCrudDialogOpen, setCrudDialogOpen] = useState(false);\n//   const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);\n//   const [selectedRow, setSelectedRow] = useState(null);\n\n//   // Fetch data (simulating with JSON file here)\n//   useEffect(() => {\n//     // Simulate an API call\n//     setTimeout(() => {\n//       setData(userData);\n//     }, 500);\n//   }, []);\n\n//   // Memoized table data for optimized rendering\n//   const memoizedData = useMemo(() => data, [data]);\n\n//   // Add a new user\n//   const handleAdd = useCallback(() => {\n//     setCrudDialogOpen(true);\n//   }, []);\n\n//   // Edit a user\n//   const handleEdit = useCallback((row) => {\n//     setSelectedRow(row); // Set selected user for editing\n//     setCrudDialogOpen(true);\n//   }, []);\n\n//   // Delete a user\n//   const handleDelete = useCallback((id) => {\n//     setData((prevData) => prevData.filter((item) => item.id !== id));\n//     setConfirmDialogOpen(false);\n//   }, []);\n\n//   // Save user data (add or update)\n//   const handleSave = useCallback((user) => {\n//     if (user.id) {\n//       // Edit existing user\n//       setData((prevData) => prevData.map((item) => (item.id === user.id ? user : item)));\n//     } else {\n//       // Add new user with generated ID\n//       const newId = data.length === 0 ? 1 : Math.max(...data.map((user) => user.id)) + 1; // Generate sequential ID\n//       const newUser = { ...user, id: newId };\n//       setData((prevData) => [...prevData, newUser]);\n//     }\n//     setCrudDialogOpen(false); // Close the dialog after saving\n//   }, [data]);\n\n//   // Navigate to details page\n//   const handleViewDetails = useCallback((row) => {\n//     navigate(`/details/${row.id}`); // Navigate to the details page\n//   }, [navigate]);\n\n//   return (\n//     <Container>\n//       <Button\n//         variant=\"contained\"\n//         color=\"primary\"\n//         onClick={handleAdd}\n//         style={{ margin: '20px 0' }}\n//       >\n//         Add User\n//       </Button>\n//       <DataTable\n//         data={memoizedData}\n//         onEdit={handleEdit}\n//         onDelete={(id) => {\n//           setSelectedRow({ id });\n//           setConfirmDialogOpen(true);\n//         }}\n//         onViewDetails={handleViewDetails} // Pass view details handler\n//       />\n//       <CrudDialog\n//         open={isCrudDialogOpen}\n//         onClose={() => setCrudDialogOpen(false)}\n//         onSave={handleSave}\n//         initialData={selectedRow} // Pass selected user data for editing\n//       />\n//       <ConfirmDialog\n//         open={isConfirmDialogOpen}\n//         onClose={() => setConfirmDialogOpen(false)}\n//         onConfirm={() => handleDelete(selectedRow?.id)}\n//       />\n//     </Container>\n//   );\n// }\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Button, Container, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\nimport DataTable from '../components/DataTable';\nimport CrudDialog from '../components/CrudDialog';\nimport userData from '../data/userData.json'; // Import JSON data\nimport { useNavigate } from 'react-router-dom'; // For navigation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CrudDashboard() {\n  _s();\n  const navigate = useNavigate();\n  const [data, setData] = useState(userData);\n  const [isCrudDialogOpen, setCrudDialogOpen] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);\n\n  // Memoized table data for optimized rendering\n  const memoizedData = useMemo(() => data, [data]);\n\n  // Add a new user\n  const handleAdd = useCallback(() => {\n    setCrudDialogOpen(true);\n  }, []);\n\n  // Edit a user\n  const handleEdit = useCallback(row => {\n    setSelectedRow(row); // Set selected user for editing\n    setCrudDialogOpen(true);\n  }, []);\n\n  // Delete a user\n  const handleDelete = useCallback(() => {\n    console.log(\"selectedRow before delete:\", selectedRow); // Debugging statement\n    if (selectedRow) {\n      setData(prevData => {\n        const newData = prevData.filter(item => item.id !== selectedRow.id);\n        console.log(\"Updated Data after delete:\", newData); // Debugging statement\n        return newData;\n      });\n    }\n    setConfirmDialogOpen(false);\n  }, [selectedRow]);\n\n  // Save user data (add or update)\n  const handleSave = useCallback(user => {\n    if (user.id) {\n      setData(prevData => prevData.map(item => item.id === user.id ? user : item));\n    } else {\n      const newId = data.length === 0 ? 1 : Math.max(...data.map(user => user.id)) + 1; // Generate sequential ID\n      const newUser = {\n        ...user,\n        id: newId\n      };\n      setData(prevData => [...prevData, newUser]);\n    }\n    setCrudDialogOpen(false); // Close the dialog after saving\n  }, [data]);\n\n  // Navigate to details page\n  const handleViewDetails = useCallback(row => {\n    navigate(`/details/${row.id}`); // Navigate to the details page\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleAdd,\n      style: {\n        margin: '20px 0'\n      },\n      children: \"Add User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: memoizedData,\n      onEdit: handleEdit,\n      onDelete: row => {\n        console.log(\"row clicked for delete:\", row); // Debugging statement\n        setSelectedRow(row);\n        setConfirmDialogOpen(true);\n      },\n      onViewDetails: handleViewDetails // Pass view details handler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CrudDialog, {\n      open: isCrudDialogOpen,\n      onClose: () => setCrudDialogOpen(false),\n      onSave: handleSave,\n      initialData: selectedRow // Pass selected user data for editing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: isConfirmDialogOpen,\n      onClose: () => setConfirmDialogOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Confirm Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: \"Are you sure you want to delete this item?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setConfirmDialogOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDelete,\n          variant: \"contained\",\n          color: \"error\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n_s(CrudDashboard, \"z2NuD8qR5+SmdSKDAcwhoRCheYo=\", false, function () {\n  return [useNavigate];\n});\n_c = CrudDashboard;\nvar _c;\n$RefreshReg$(_c, \"CrudDashboard\");","map":{"version":3,"names":["React","useState","useCallback","useMemo","Button","Container","Dialog","DialogActions","DialogContent","DialogTitle","DataTable","CrudDialog","userData","useNavigate","jsxDEV","_jsxDEV","CrudDashboard","_s","navigate","data","setData","isCrudDialogOpen","setCrudDialogOpen","selectedRow","setSelectedRow","isConfirmDialogOpen","setConfirmDialogOpen","memoizedData","handleAdd","handleEdit","row","handleDelete","console","log","prevData","newData","filter","item","id","handleSave","user","map","newId","length","Math","max","newUser","handleViewDetails","children","variant","color","onClick","style","margin","fileName","_jsxFileName","lineNumber","columnNumber","onEdit","onDelete","onViewDetails","open","onClose","onSave","initialData","_c","$RefreshReg$"],"sources":["C:/Users/sudheer.kokolu/OneDrive - Sonata Software Limited/FJA_Pricing_Tasks/OAuthFrontend/crudapplication/src/pages/CrudDashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\n// import { Button, Container } from '@mui/material';\r\n// import DataTable from '../components/DataTable';\r\n// import CrudDialog from '../components/CrudDialog';\r\n// import ConfirmDialog from '../components/ConfirmDialog';\r\n// import userData from '../data/userData.json'; // Import JSON data\r\n// import { useNavigate } from 'react-router-dom'; // For navigation\r\n\r\n// export default function CrudDashboard() {\r\n//   const navigate = useNavigate();\r\n\r\n//   // State to manage data\r\n//   const [data, setData] = useState([]);\r\n//   const [isCrudDialogOpen, setCrudDialogOpen] = useState(false);\r\n//   const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);\r\n//   const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n//   // Fetch data (simulating with JSON file here)\r\n//   useEffect(() => {\r\n//     // Simulate an API call\r\n//     setTimeout(() => {\r\n//       setData(userData);\r\n//     }, 500);\r\n//   }, []);\r\n\r\n//   // Memoized table data for optimized rendering\r\n//   const memoizedData = useMemo(() => data, [data]);\r\n\r\n//   // Add a new user\r\n//   const handleAdd = useCallback(() => {\r\n//     setCrudDialogOpen(true);\r\n//   }, []);\r\n\r\n//   // Edit a user\r\n//   const handleEdit = useCallback((row) => {\r\n//     setSelectedRow(row); // Set selected user for editing\r\n//     setCrudDialogOpen(true);\r\n//   }, []);\r\n\r\n//   // Delete a user\r\n//   const handleDelete = useCallback((id) => {\r\n//     setData((prevData) => prevData.filter((item) => item.id !== id));\r\n//     setConfirmDialogOpen(false);\r\n//   }, []);\r\n\r\n//   // Save user data (add or update)\r\n//   const handleSave = useCallback((user) => {\r\n//     if (user.id) {\r\n//       // Edit existing user\r\n//       setData((prevData) => prevData.map((item) => (item.id === user.id ? user : item)));\r\n//     } else {\r\n//       // Add new user with generated ID\r\n//       const newId = data.length === 0 ? 1 : Math.max(...data.map((user) => user.id)) + 1; // Generate sequential ID\r\n//       const newUser = { ...user, id: newId };\r\n//       setData((prevData) => [...prevData, newUser]);\r\n//     }\r\n//     setCrudDialogOpen(false); // Close the dialog after saving\r\n//   }, [data]);\r\n\r\n//   // Navigate to details page\r\n//   const handleViewDetails = useCallback((row) => {\r\n//     navigate(`/details/${row.id}`); // Navigate to the details page\r\n//   }, [navigate]);\r\n\r\n//   return (\r\n//     <Container>\r\n//       <Button\r\n//         variant=\"contained\"\r\n//         color=\"primary\"\r\n//         onClick={handleAdd}\r\n//         style={{ margin: '20px 0' }}\r\n//       >\r\n//         Add User\r\n//       </Button>\r\n//       <DataTable\r\n//         data={memoizedData}\r\n//         onEdit={handleEdit}\r\n//         onDelete={(id) => {\r\n//           setSelectedRow({ id });\r\n//           setConfirmDialogOpen(true);\r\n//         }}\r\n//         onViewDetails={handleViewDetails} // Pass view details handler\r\n//       />\r\n//       <CrudDialog\r\n//         open={isCrudDialogOpen}\r\n//         onClose={() => setCrudDialogOpen(false)}\r\n//         onSave={handleSave}\r\n//         initialData={selectedRow} // Pass selected user data for editing\r\n//       />\r\n//       <ConfirmDialog\r\n//         open={isConfirmDialogOpen}\r\n//         onClose={() => setConfirmDialogOpen(false)}\r\n//         onConfirm={() => handleDelete(selectedRow?.id)}\r\n//       />\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n\r\n\r\nimport React, { useState, useCallback, useMemo } from 'react';\r\nimport { Button, Container, Dialog, DialogActions, DialogContent, DialogTitle } from '@mui/material';\r\nimport DataTable from '../components/DataTable';\r\nimport CrudDialog from '../components/CrudDialog';\r\nimport userData from '../data/userData.json'; // Import JSON data\r\nimport { useNavigate } from 'react-router-dom'; // For navigation\r\n\r\nexport default function CrudDashboard() {\r\n  const navigate = useNavigate();\r\n  const [data, setData] = useState(userData);\r\n  const [isCrudDialogOpen, setCrudDialogOpen] = useState(false);\r\n  const [selectedRow, setSelectedRow] = useState(null);\r\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);\r\n\r\n  // Memoized table data for optimized rendering\r\n  const memoizedData = useMemo(() => data, [data]);\r\n\r\n  // Add a new user\r\n  const handleAdd = useCallback(() => {\r\n    setCrudDialogOpen(true);\r\n  }, []);\r\n\r\n  // Edit a user\r\n  const handleEdit = useCallback((row) => {\r\n    setSelectedRow(row); // Set selected user for editing\r\n    setCrudDialogOpen(true);\r\n  }, []);\r\n\r\n  // Delete a user\r\n  const handleDelete = useCallback(() => {\r\n    console.log(\"selectedRow before delete:\", selectedRow); // Debugging statement\r\n    if (selectedRow) {\r\n      setData((prevData) => {\r\n        const newData = prevData.filter((item) => item.id !== selectedRow.id);\r\n        console.log(\"Updated Data after delete:\", newData); // Debugging statement\r\n        return newData;\r\n      });\r\n    }\r\n    setConfirmDialogOpen(false);\r\n  }, [selectedRow]);\r\n\r\n  // Save user data (add or update)\r\n  const handleSave = useCallback((user) => {\r\n    if (user.id) {\r\n      setData((prevData) => prevData.map((item) => (item.id === user.id ? user : item)));\r\n    } else {\r\n      const newId = data.length === 0 ? 1 : Math.max(...data.map((user) => user.id)) + 1; // Generate sequential ID\r\n      const newUser = { ...user, id: newId };\r\n      setData((prevData) => [...prevData, newUser]);\r\n    }\r\n    setCrudDialogOpen(false); // Close the dialog after saving\r\n  }, [data]);\r\n\r\n  // Navigate to details page\r\n  const handleViewDetails = useCallback((row) => {\r\n    navigate(`/details/${row.id}`); // Navigate to the details page\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <Container>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={handleAdd}\r\n        style={{ margin: '20px 0' }}\r\n      >\r\n        Add User\r\n      </Button>\r\n      <DataTable\r\n        data={memoizedData}\r\n        onEdit={handleEdit}\r\n        onDelete={(row) => {\r\n          console.log(\"row clicked for delete:\", row); // Debugging statement\r\n          setSelectedRow(row);\r\n          setConfirmDialogOpen(true);\r\n        }}\r\n        onViewDetails={handleViewDetails} // Pass view details handler\r\n      />\r\n      <CrudDialog\r\n        open={isCrudDialogOpen}\r\n        onClose={() => setCrudDialogOpen(false)}\r\n        onSave={handleSave}\r\n        initialData={selectedRow} // Pass selected user data for editing\r\n      />\r\n      \r\n      {/* Merged ConfirmDialog Logic */}\r\n      <Dialog open={isConfirmDialogOpen} onClose={() => setConfirmDialogOpen(false)}>\r\n        <DialogTitle>Confirm Delete</DialogTitle>\r\n        <DialogContent>Are you sure you want to delete this item?</DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setConfirmDialogOpen(false)}>Cancel</Button>\r\n          <Button onClick={handleDelete} variant=\"contained\" color=\"error\">Delete</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </Container>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}