{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sudheer.kokolu\\\\OneDrive - Sonata Software Limited\\\\FJA_Pricing_Tasks\\\\OAuthFrontend\\\\crudapplication\\\\src\\\\pages\\\\CrudDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { Button, Container } from '@mui/material';\nimport DataTable from '../components/DataTable';\nimport CrudDialog from '../components/CrudDialog';\nimport ConfirmDialog from '../components/ConfirmDialog';\nimport userData from '../data/userData.json'; // Import JSON data\nimport { useNavigate } from 'react-router-dom'; // For navigation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CrudDashboard() {\n  _s();\n  const navigate = useNavigate();\n\n  // State to manage data\n  const [data, setData] = useState([]);\n  const [isCrudDialogOpen, setCrudDialogOpen] = useState(false);\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);\n  const [selectedRow, setSelectedRow] = useState(null);\n\n  // Fetch data (simulating with JSON file here)\n  useEffect(() => {\n    // Simulate an API call\n    setTimeout(() => {\n      setData(userData);\n    }, 500);\n  }, []);\n\n  // Memoized table data for optimized rendering\n  const memoizedData = useMemo(() => data, [data]);\n\n  // Add a new user\n  const handleAdd = useCallback(() => {\n    // setSelectedRow(null); \n    setCrudDialogOpen(true);\n  }, []);\n\n  // Edit a user\n  const handleEdit = useCallback(row => {\n    setSelectedRow(row); // Set selected user for editing\n    setCrudDialogOpen(true);\n  }, []);\n\n  // Delete a user\n  const handleDelete = useCallback(id => {\n    setData(prevData => prevData.filter(item => item.id !== id));\n    setConfirmDialogOpen(false);\n  }, []);\n\n  // Save user data (add or update)\n  const handleSave = useCallback(user => {\n    if (user.id) {\n      // Edit existing user\n      setData(prevData => prevData.map(item => item.id === user.id ? user : item));\n    } else {\n      // Add new user with generated ID\n      const newId = data.length === 0 ? 1 : Math.max(...data.map(user => user.id)) + 1; // Generate sequential ID\n      const newUser = {\n        ...user,\n        id: newId\n      };\n      setData(prevData => [...prevData, newUser]);\n    }\n    setCrudDialogOpen(false); // Close the dialog after saving\n  }, [data]);\n\n  // Navigate to details page\n  const handleViewDetails = useCallback(row => {\n    navigate(`/details/${row.id}`); // Navigate to the details page\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: handleAdd,\n      style: {\n        margin: '20px 0'\n      },\n      children: \"Add User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n      data: memoizedData,\n      onEdit: handleEdit,\n      onDelete: id => {\n        setSelectedRow({\n          id\n        });\n        setConfirmDialogOpen(true);\n      },\n      onViewDetails: handleViewDetails // Pass view details handler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CrudDialog, {\n      open: isCrudDialogOpen,\n      onClose: () => setCrudDialogOpen(false),\n      onSave: handleSave,\n      initialData: selectedRow // Pass selected user data for editing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmDialog, {\n      open: isConfirmDialogOpen,\n      onClose: () => setConfirmDialogOpen(false),\n      onConfirm: () => handleDelete(selectedRow === null || selectedRow === void 0 ? void 0 : selectedRow.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(CrudDashboard, \"GNuSL3MCLdFIvFhp7XLRbFXsSYc=\", false, function () {\n  return [useNavigate];\n});\n_c = CrudDashboard;\nvar _c;\n$RefreshReg$(_c, \"CrudDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Button","Container","DataTable","CrudDialog","ConfirmDialog","userData","useNavigate","jsxDEV","_jsxDEV","CrudDashboard","_s","navigate","data","setData","isCrudDialogOpen","setCrudDialogOpen","isConfirmDialogOpen","setConfirmDialogOpen","selectedRow","setSelectedRow","setTimeout","memoizedData","handleAdd","handleEdit","row","handleDelete","id","prevData","filter","item","handleSave","user","map","newId","length","Math","max","newUser","handleViewDetails","children","variant","color","onClick","style","margin","fileName","_jsxFileName","lineNumber","columnNumber","onEdit","onDelete","onViewDetails","open","onClose","onSave","initialData","onConfirm","_c","$RefreshReg$"],"sources":["C:/Users/sudheer.kokolu/OneDrive - Sonata Software Limited/FJA_Pricing_Tasks/OAuthFrontend/crudapplication/src/pages/CrudDashboard.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\nimport { Button, Container } from '@mui/material';\r\nimport DataTable from '../components/DataTable';\r\nimport CrudDialog from '../components/CrudDialog';\r\nimport ConfirmDialog from '../components/ConfirmDialog';\r\nimport userData from '../data/userData.json'; // Import JSON data\r\nimport { useNavigate } from 'react-router-dom'; // For navigation\r\n\r\nexport default function CrudDashboard() {\r\n  const navigate = useNavigate();\r\n\r\n  // State to manage data\r\n  const [data, setData] = useState([]);\r\n  const [isCrudDialogOpen, setCrudDialogOpen] = useState(false);\r\n  const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);\r\n  const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n  // Fetch data (simulating with JSON file here)\r\n  useEffect(() => {\r\n    // Simulate an API call\r\n    setTimeout(() => {\r\n      setData(userData);\r\n    }, 500);\r\n  }, []);\r\n\r\n  // Memoized table data for optimized rendering\r\n  const memoizedData = useMemo(() => data, [data]);\r\n\r\n  // Add a new user\r\n  const handleAdd = useCallback(() => {\r\n    // setSelectedRow(null); \r\n    setCrudDialogOpen(true);\r\n  }, []);\r\n\r\n  // Edit a user\r\n  const handleEdit = useCallback((row) => {\r\n    setSelectedRow(row); // Set selected user for editing\r\n    setCrudDialogOpen(true);\r\n  }, []);\r\n\r\n  // Delete a user\r\n  const handleDelete = useCallback((id) => {\r\n    setData((prevData) => prevData.filter((item) => item.id !== id));\r\n    setConfirmDialogOpen(false);\r\n  }, []);\r\n\r\n  // Save user data (add or update)\r\n  const handleSave = useCallback((user) => {\r\n    if (user.id) {\r\n      // Edit existing user\r\n      setData((prevData) => prevData.map((item) => (item.id === user.id ? user : item)));\r\n    } else {\r\n      // Add new user with generated ID\r\n      const newId = data.length === 0 ? 1 : Math.max(...data.map((user) => user.id)) + 1; // Generate sequential ID\r\n      const newUser = { ...user, id: newId };\r\n      setData((prevData) => [...prevData, newUser]);\r\n    }\r\n    setCrudDialogOpen(false); // Close the dialog after saving\r\n  }, [data]);\r\n\r\n  // Navigate to details page\r\n  const handleViewDetails = useCallback((row) => {\r\n    navigate(`/details/${row.id}`); // Navigate to the details page\r\n  }, [navigate]);\r\n\r\n  return (\r\n    <Container>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={handleAdd}\r\n        style={{ margin: '20px 0' }}\r\n      >\r\n        Add User\r\n      </Button>\r\n      <DataTable\r\n        data={memoizedData}\r\n        onEdit={handleEdit}\r\n        onDelete={(id) => {\r\n          setSelectedRow({ id });\r\n          setConfirmDialogOpen(true);\r\n        }}\r\n        onViewDetails={handleViewDetails} // Pass view details handler\r\n      />\r\n      <CrudDialog\r\n        open={isCrudDialogOpen}\r\n        onClose={() => setCrudDialogOpen(false)}\r\n        onSave={handleSave}\r\n        initialData={selectedRow} // Pass selected user data for editing\r\n      />\r\n      <ConfirmDialog\r\n        open={isConfirmDialogOpen}\r\n        onClose={() => setConfirmDialogOpen(false)}\r\n        onConfirm={() => handleDelete(selectedRow?.id)}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}