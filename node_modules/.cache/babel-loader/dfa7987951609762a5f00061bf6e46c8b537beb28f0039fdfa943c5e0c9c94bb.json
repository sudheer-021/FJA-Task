{"ast":null,"code":"// import React, { useState, useEffect, useMemo, useCallback } from 'react';\n// import { Button, Container } from '@mui/material';\n// import DataTable from '../components/DataTable';\n// import CrudDialog from '../components/CrudDialog';\n// import ConfirmDialog from '../components/ConfirmDialog';\n// import userData from '../data/userData.json'; // Import JSON data\n// import { useNavigate } from 'react-router-dom'; // For navigation\n\n// export default function CrudDashboard() {\n//   const navigate = useNavigate();\n\n//   // State to manage data\n//   const [data, setData] = useState([]);\n//   const [isCrudDialogOpen, setCrudDialogOpen] = useState(false);\n//   const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);\n//   const [selectedRow, setSelectedRow] = useState(null);\n\n//   // Fetch data (simulating with JSON file here)\n//   useEffect(() => {\n//     // Simulate an API call\n//     setTimeout(() => {\n//       setData(userData);\n//     }, 500);\n//   }, []);\n\n//   // Memoized table data for optimized rendering\n//   const memoizedData = useMemo(() => data, [data]);\n\n//   // Add a new user\n//   const handleAdd = useCallback(() => {\n//     setCrudDialogOpen(true);\n//   }, []);\n\n//   // Edit a user\n//   const handleEdit = useCallback((row) => {\n//     setSelectedRow(row); // Set selected user for editing\n//     setCrudDialogOpen(true);\n//   }, []);\n\n//   // Delete a user\n//   const handleDelete = useCallback((id) => {\n//     setData((prevData) => prevData.filter((item) => item.id !== id));\n//     setConfirmDialogOpen(false);\n//   }, []);\n\n//   // Save user data (add or update)\n//   const handleSave = useCallback((user) => {\n//     if (user.id) {\n//       // Edit existing user\n//       setData((prevData) => prevData.map((item) => (item.id === user.id ? user : item)));\n//     } else {\n//       // Add new user with generated ID\n//       const newId = data.length === 0 ? 1 : Math.max(...data.map((user) => user.id)) + 1; // Generate sequential ID\n//       const newUser = { ...user, id: newId };\n//       setData((prevData) => [...prevData, newUser]);\n//     }\n//     setCrudDialogOpen(false); // Close the dialog after saving\n//   }, [data]);\n\n//   // Navigate to details page\n//   const handleViewDetails = useCallback((row) => {\n//     navigate(`/details/${row.id}`); // Navigate to the details page\n//   }, [navigate]);\n\n//   return (\n//     <Container>\n//       <Button\n//         variant=\"contained\"\n//         color=\"primary\"\n//         onClick={handleAdd}\n//         style={{ margin: '20px 0' }}\n//       >\n//         Add User\n//       </Button>\n//       <DataTable\n//         data={memoizedData}\n//         onEdit={handleEdit}\n//         onDelete={(id) => {\n//           setSelectedRow({ id });\n//           setConfirmDialogOpen(true);\n//         }}\n//         onViewDetails={handleViewDetails} // Pass view details handler\n//       />\n//       <CrudDialog\n//         open={isCrudDialogOpen}\n//         onClose={() => setCrudDialogOpen(false)}\n//         onSave={handleSave}\n//         initialData={selectedRow} // Pass selected user data for editing\n//       />\n//       <ConfirmDialog\n//         open={isConfirmDialogOpen}\n//         onClose={() => setConfirmDialogOpen(false)}\n//         onConfirm={() => handleDelete(selectedRow?.id)}\n//       />\n//     </Container>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/sudheer.kokolu/OneDrive - Sonata Software Limited/FJA_Pricing_Tasks/OAuthFrontend/crudapplication/src/pages/CrudDashboard.js"],"sourcesContent":["// import React, { useState, useEffect, useMemo, useCallback } from 'react';\r\n// import { Button, Container } from '@mui/material';\r\n// import DataTable from '../components/DataTable';\r\n// import CrudDialog from '../components/CrudDialog';\r\n// import ConfirmDialog from '../components/ConfirmDialog';\r\n// import userData from '../data/userData.json'; // Import JSON data\r\n// import { useNavigate } from 'react-router-dom'; // For navigation\r\n\r\n// export default function CrudDashboard() {\r\n//   const navigate = useNavigate();\r\n\r\n//   // State to manage data\r\n//   const [data, setData] = useState([]);\r\n//   const [isCrudDialogOpen, setCrudDialogOpen] = useState(false);\r\n//   const [isConfirmDialogOpen, setConfirmDialogOpen] = useState(false);\r\n//   const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n//   // Fetch data (simulating with JSON file here)\r\n//   useEffect(() => {\r\n//     // Simulate an API call\r\n//     setTimeout(() => {\r\n//       setData(userData);\r\n//     }, 500);\r\n//   }, []);\r\n\r\n//   // Memoized table data for optimized rendering\r\n//   const memoizedData = useMemo(() => data, [data]);\r\n\r\n//   // Add a new user\r\n//   const handleAdd = useCallback(() => {\r\n//     setCrudDialogOpen(true);\r\n//   }, []);\r\n\r\n//   // Edit a user\r\n//   const handleEdit = useCallback((row) => {\r\n//     setSelectedRow(row); // Set selected user for editing\r\n//     setCrudDialogOpen(true);\r\n//   }, []);\r\n\r\n//   // Delete a user\r\n//   const handleDelete = useCallback((id) => {\r\n//     setData((prevData) => prevData.filter((item) => item.id !== id));\r\n//     setConfirmDialogOpen(false);\r\n//   }, []);\r\n\r\n//   // Save user data (add or update)\r\n//   const handleSave = useCallback((user) => {\r\n//     if (user.id) {\r\n//       // Edit existing user\r\n//       setData((prevData) => prevData.map((item) => (item.id === user.id ? user : item)));\r\n//     } else {\r\n//       // Add new user with generated ID\r\n//       const newId = data.length === 0 ? 1 : Math.max(...data.map((user) => user.id)) + 1; // Generate sequential ID\r\n//       const newUser = { ...user, id: newId };\r\n//       setData((prevData) => [...prevData, newUser]);\r\n//     }\r\n//     setCrudDialogOpen(false); // Close the dialog after saving\r\n//   }, [data]);\r\n\r\n//   // Navigate to details page\r\n//   const handleViewDetails = useCallback((row) => {\r\n//     navigate(`/details/${row.id}`); // Navigate to the details page\r\n//   }, [navigate]);\r\n\r\n//   return (\r\n//     <Container>\r\n//       <Button\r\n//         variant=\"contained\"\r\n//         color=\"primary\"\r\n//         onClick={handleAdd}\r\n//         style={{ margin: '20px 0' }}\r\n//       >\r\n//         Add User\r\n//       </Button>\r\n//       <DataTable\r\n//         data={memoizedData}\r\n//         onEdit={handleEdit}\r\n//         onDelete={(id) => {\r\n//           setSelectedRow({ id });\r\n//           setConfirmDialogOpen(true);\r\n//         }}\r\n//         onViewDetails={handleViewDetails} // Pass view details handler\r\n//       />\r\n//       <CrudDialog\r\n//         open={isCrudDialogOpen}\r\n//         onClose={() => setCrudDialogOpen(false)}\r\n//         onSave={handleSave}\r\n//         initialData={selectedRow} // Pass selected user data for editing\r\n//       />\r\n//       <ConfirmDialog\r\n//         open={isConfirmDialogOpen}\r\n//         onClose={() => setConfirmDialogOpen(false)}\r\n//         onConfirm={() => handleDelete(selectedRow?.id)}\r\n//       />\r\n//     </Container>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}